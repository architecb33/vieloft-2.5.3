<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <style name="Iconripples"
         url="%FIRSTXML%/spots/hotspot_animated_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="19"
         framewidth="64"
         frameheight="64"
         stopspotsequence="false"
         crop="0|0|64|64"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconripples"
         onover="onoverIconripples"
         onout="onoutIconripples"

         height="100"
         width="100"
         />

  <action name="onhoverIconripples">
    showtooltip('hotspot');
  </action>

  <action name="onoverIconripples">
tween(scale, 1.2);

pauseautorotation(forcehotspot);

  </action>

  <action name="onoutIconripples">
    hideTooltip();
    tween(scale, 1);

resumeautorotation(forcehotspot);

  </action>



  


    
  <style name="Iconinfosign"
         url="%FIRSTXML%/spots/infoblink_user_defaultpoint2.gif"
         visible="false"
         zoom="true"

         onhover="onhoverIconinfosign"
         onover="onoverIconinfosign"
         onout="onoutIconinfosign"

         height="35"
         width="35"
         />

  <action name="onhoverIconinfosign">
    showtooltip('hotspot');
  </action>

  <action name="onoverIconinfosign">


pauseautorotation(forcehotspot);

  </action>

  <action name="onoutIconinfosign">
    hideTooltip();


resumeautorotation(forcehotspot);

  </action>



    
  <style name="Iconripplemed"
         url="%FIRSTXML%/spots/hotspot_animated_user_defaultpoint3.png"
         visible="false"
         frame="0"
         lastframe="19"
         framewidth="64"
         frameheight="64"
         stopspotsequence="false"
         crop="0|0|64|64"
         zoom="true"

         alpha="0.8"
         onloaded="startspotanimation(0.1);if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconripplemed"
         onover="onoverIconripplemed"
         onout="onoutIconripplemed"

         height="55"
         width="55"
         />

  <action name="onhoverIconripplemed">
    showtooltip('hotspot');
  </action>

  <action name="onoverIconripplemed">
tween(scale, 1.2);
tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>

  <action name="onoutIconripplemed">
    hideTooltip();
    tween(scale, 1);
    tween(alpha, 0.8);
resumeautorotation(forcehotspot);

  </action>




  <layer name="coloredarea"
         keep="true"
         type="container"
         align="bottom"
         x="0"
         y="0"
         zorder="1"
         height="50"
         width="100%"
         accuracy="1"
         visible="false"
         bgcolor="0x001f34"
         bgalpha="0.80000000000000004"
         />

  <events name="coloredareaevents"
    onTourStart="showcoloredarea();"
    hidetourcontrols="hidecoloredarea();"
    showtourcontrols="showcoloredarea();"
    keep="true"/>

  <action name="hidecoloredarea">
    set(layer[coloredarea].visible, false);
  </action>
  <action name="showcoloredarea">
    set(layer[coloredarea].visible, true);
  </action>



<ptplugin name="description" canStart="false" newPano="false" openatstart="false" mode="panorama" startMethod="showDescription_description" engine="kolorArea">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="background_color" value="000000" type="string" />
		<option name="background_alpha" value="0.80000000000000004" type="float" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="padding" value="25" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="descriptiondisplay_close_text" type="string" />

		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0" type="float" />

		<option name="area_width" value="300" type="int" />
		<option name="area_height" value="250" type="int" />
		<option name="area_width_unit" value="pixel" type="string" />
		<option name="area_height_unit" value="pixel" type="string" />
		<option name="animation" value="false" type="bool" />
		<option name="animation_duration" value="500" type="int" />
		<option name="refresh_content" value="true" type="bool" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_description')" type="string" />
		<option name="close_on_click" value="false" type="bool" />
		<option name="zorder" value="2" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
</ptplugin>

<action name="kolorAreaJsReady_description">
	set(ptplugin[description].jsready, true);

</action>


<action name="openKolorArea_description">
	ifnot(ptplugin[description].isOpen,
		set(ptplugin[description].isOpen, true);
		
		js(showKolorArea(description, get(ptplugin[description].descID)));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="closeKolorArea_description">
	if(ptplugin[description].isOpen,
		js(invokePluginFunction(description, closeKolorArea));
	);
</action>

<action name="toggleKolorArea_description">
	if(ptplugin[description].isOpen,
		closeKolorArea_description();
	,
		openKolorArea_description();
	);
</action>

<action name="closeKolorAreaCallback_description">
	set(ptplugin[description].isOpen, false);
	if(tour_displayinfo,hideTourInfo();

	);
</action>



<action name="showKolorArea_description">
	ifnot(ptplugin[description].startMethod == "",
		delayedcall(0,get(ptplugin[description].startMethod));
	,
		set(ptplugin[description].isOpen, true);
		
		js(invokePluginFunction(description, showKolorArea, %1));
		events.dispatch(onremovedisplayedobject);
	);
</action>
	
<action name="hideKolorArea_description">
	
	set(ptplugin[description].isOpen, false);
	js(invokePluginFunction(description, hideKolorArea, %1));
</action>

<action name="openDescription_description">
	openKolorArea_description();
</action>

<action name="openSpotDescription_description">
	set(ptplugin[description].descID, %1);
	openKolorArea_description();
</action>

<action name="closeDescription_description">
	set(ptplugin[description].currentGroup, false);
	if(%1,
		set(restore_description, true);
	,
		set(restore_description, false);
	);
	closeKolorArea_description();
</action> 

<action name="showDescription_description">
	if(ptplugin[description].canStart,
		set(ptplugin[description].descID, get(scene[get(xml.scene)].descriptionid));
		if(ptplugin[description].descID == null,
			set(ptplugin[description].descID, "");
		);
		if(ptplugin[description].descID != "",
			openDescription_description();
		,
			hideKolorArea_description(false);
		);
		set(ptplugin[description].startMethod, "");
	);
</action>


<action name="refreshPanoDescription_description">
	set(ptplugin[description].descID, get(scene[get(xml.scene)].descriptionid));
	if(ptplugin[description].descID == null,
		set(ptplugin[description].descID, "");
	);
	if(ptplugin[description].descID != "",
		if(ptplugin[description].isOpen,
			js(invokePluginFunction(description, updateKolorArea, get(ptplugin[description].descID)));
		,
			if(restore_description,
				showDescription_description();
			);
		);
	,
		if(tour_displayinfo,
			delayedcall(0.1,showTourInfo();
);
		);
		closeDescription_description(get(ptplugin[description].isOpen));
	);
</action>

<action name="onNewPano_description">
	if(ptplugin[description].newPano,
		if(ptplugin[description].startMethod == "",
			if(ptplugin[description].isOpen,
				refreshPanoDescription_description();
			,
				if(tour_displaycontrols,
				if(tour_displayinfo,
				showDescription_description();
				,
				refreshPanoDescription_description();
				);
				);
			);
		);
	);
	set(ptplugin[description].newPano, true);
</action>

<action name="changeLanguage_description">
	if(ptplugin[description].jsready,
		stopdelayedcall(delay_description);
		js(invokePluginFunction(description, changeLanguage, true));
	,
		delayedcall(delay_description, 0.1, changeLanguage_description(););
	);
</action>

<events name="kolorAreaEvents_description" 
	keep="true"
	onTourStart="set(ptplugin[description].canStart, true);if(ptplugin[description].openatstart,if(tour_displaycontrols,showTourInfo();
););"
	onshowtourinfo="if(tour_displayinfo,showDescription_description(););"
	onhidetourinfo="if(ptplugin[description].isOpen,closeDescription_description(false););"
	onnewpano="onNewPano_description();"
	hidetourcontrols="if(ptplugin[description].isOpen,hideKolorArea_description(false););"
	showtourcontrols="if(tour_displayinfo,if(ptplugin[description].isOpen,showKolorArea_description(false);,showDescription_description();););"
	changetourlanguage="changeLanguage_description();"
/>


	<ptplugin name="floorPlan" engine="KolorFloorPlan">
		<settings>
			<option name="background_color" value="f2f2f2" type="string" />
			<option name="background_lighter_color" value="ffffff" type="string" />
			<option name="background_darker_color" value="cacaca" type="string" />
			<option name="background_alpha" value="0" type="float" />
			<option name="text_color" value="ffffff" type="string" />
			<option name="resize" value="true" type="bool" />
			<option name="fp_selector" value="one" type="string" />
			<option name="fp_selector_label" value="floorPlanmenu_label" type="string" />
			<option name="display_title" value="false" type="bool" />
			<option name="title_font" value="Arial" type="string" />
			<option name="title_size" value="14" type="int" />
			<option name="title_weight" value="normal" type="string" />
			<option name="title_decoration" value="normal" type="string" />
			<option name="title_color" value="000000" type="string" />
			<option name="display_orientation" value="false" type="bool" />
			<option name="display_radar" value="true" type="bool" />
			<option name="radar_radius" value="40" type="int" />
			<option name="radar_line_width" value="1" type="int" />
			<option name="radar_line_color" value="ffffff" type="string" />
			<option name="radar_line_alpha" value="0" type="float" />
			<option name="radar_fill_color" value="ffffff" type="string" />
			<option name="radar_fill_alpha" value="0.7000076295109483" type="float" />
			<option name="close_on_click" value="true" type="bool" />
			<option name="position" value="topleft" type="string" />
			<option name="zorder" value="3" type="int" />
			<option name="use_i18n" value="true" type="bool" />
		</settings>
		
		<floorplanItems selectedItem="" selectedSpot="" selectedSpotScene="" selectedSpotHeading="" selectedSpotFov="">
			
			
							<floorplanItem 
								name="fpitempanogroup105" 
								width="1" 
								height="150" 
								groupName="panogroup105" 
								url="floorplan/blankfloorplan_panogroup105.png" 
								title="panogroup105_floor_title"
								heading="0">
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup26" 
								width="800" 
								height="491" 
								groupName="panogroup26" 
								url="floorplan/plan06_panogroup26.png" 
								title="panogroup26_floor_title"
								heading="0">
										<spot name="spotmap150" posX="0.188213006" posY="0.59442699" heading="1.8000000000006371" desc="spotmap150_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano25" jsClick="spotmap150ActionSpotFloorPlan">
											<icon url="spots/pointer_enter2_user_defaultmap0.gif" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap151" posX="0.108364999" posY="0.328173012" heading="91" desc="spotmap151_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano23" jsClick="spotmap151ActionSpotFloorPlan">
											<icon url="spots/pointer_enter2_user_defaultmap0.gif" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap152" posX="0.431558996" posY="0.730650008" heading="0" desc="spotmap152_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano27" jsClick="spotmap152ActionSpotFloorPlan">
											<icon url="spots/pointer_enter2_user_defaultmap0.gif" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
							</floorplanItem>
							<floorplanItem 
								name="fpitempanogroup32" 
								width="800" 
								height="491" 
								groupName="panogroup32" 
								url="floorplan/plan02_panogroup32.png" 
								title="panogroup32_floor_title"
								heading="180">
										<spot name="spotmap149" posX="0.077946797" posY="0.380804986" heading="-107.9999999999999" desc="spotmap149_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano29" jsClick="spotmap149ActionSpotFloorPlan">
											<icon url="spots/pointer_enter2_user_defaultmap0.gif" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap153" posX="0.186312005" posY="0.628482997" heading="-179.19999999999979" desc="spotmap153_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano31" jsClick="spotmap153ActionSpotFloorPlan">
											<icon url="spots/pointer_enter2_user_defaultmap0.gif" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
										<spot name="spotmap154" posX="0.416350007" posY="0.56656301" heading="-173.39999999999961" desc="spotmap154_tooltip" descType="tooltip" groupName="" isScene="true" planar="false" scene="pano30" jsClick="spotmap154ActionSpotFloorPlan">
											<icon url="spots/pointer_enter2_user_defaultmap0.gif" iconWidth="30" iconHeight="30" iconAnchor="center" />
										</spot>
							</floorplanItem>
		</floorplanItems>
	</ptplugin>
	
	<action name="kolorFloorplanJsReady_floorPlan">
		set(ptplugin[floorPlan].jsready, true);
		
		ifnot(ptplugin[floorPlan].floorplanItems[0].selectedSpot == "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.hfov));
			js(invokePluginFunction(floorPlan, setKolorFloorPlanSelectedSpotOptions, get(xml.scene), get(view.hlookat), get(view.hfov)));
		);
	</action>
	
	
	
					
					
						<action name="spotmap150ActionSpotFloorPlan">
          mainloadscene(pano25);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap151ActionSpotFloorPlan">
          mainloadscene(pano23);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap152ActionSpotFloorPlan">
          mainloadscene(pano27);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
					
						<action name="spotmap149ActionSpotFloorPlan">
          mainloadscene(pano29);lookat(121.050000, 0.900000, 90.000000);

</action>
						<action name="spotmap153ActionSpotFloorPlan">
          mainloadscene(pano31);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
						<action name="spotmap154ActionSpotFloorPlan">
          mainloadscene(pano30);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));

</action>
	
	
	<events name="floorPlanEvents" 
	onxmlcomplete="ifnot(floorPlanFloorPlanLoaded,set(tour_displayfloorplan,false););floorPlanActivateDefaultSpot();" 
	onviewchanged="floorPlanOnViewChange();" 
	onhidetourfloorplan="delayedcall(0.3,floorPlanCloseTourFloorPlan(););" 
	onshowtourfloorplan="if(tour_displayfloorplan,floorPlanOpenTourFloorPlan(););" 
	onTourStart=""
	changetourlanguage="floorPlanChangeLanguage();"
	keep="true" />
	
	<action name="floorPlanChangeLanguage">
		if(ptplugin[floorPlan].jsready,
			stopdelayedcall(delay_floorPlan);
			js(invokePluginFunction(floorPlan, changeLanguage));
			js(invokePluginFunction(floorPlanArea, changeLanguage, false));
		,
			delayedcall(delay_floorPlan, 0.1, floorPlanChangeLanguage(););
		);
	</action>
	
	
	<krpano floorPlanFloorPlanLoaded="false" />
	
	<action name="floorPlanHideTourFloorPlan">
		hideKolorArea_floorPlanArea(true);
	</action>
	
	<action name="floorPlanCloseTourFloorPlan">
		closeKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanShowTourFloorPlan">
		if(ptplugin[floorPlanArea].isOpen === null,
			openKolorArea_floorPlanArea();
		,
			showKolorArea_floorPlanArea(true);
		);
	</action>
	
	<action name="floorPlanOpenTourFloorPlan">
		openKolorArea_floorPlanArea();
	</action>
	
	<action name="floorPlanOnViewChange">
		if (floorPlanFloorPlanLoaded == true,
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedSpot == "",
				ifnot(scene[get(xml.scene)].planar,
					js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
				);
			);
		);
	</action>
	
	<action name="floorPlanActivateSpot">
		
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, %1);
		set(ptplugin[floorPlan].floorplanItems[0].selectedItem, %2);
		
		if(%1 !== "",
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotScene, get(xml.scene));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotHeading, get(view.hlookat));
			set(ptplugin[floorPlan].floorplanItems[0].selectedSpotFov, get(view.hfov));
		);
		
		js(invokePluginFunction(floorPlan, selectSpot, %1, %2, %3));

		if(%1 !== "",
			if(scene[get(xml.scene)].planar,
				js(invokePluginFunction(floorPlan, hideRadar));
			,
				js(invokePluginFunction(floorPlan, changeDirection, get(xml.scene), get(view.hlookat), get(view.hfov)));
			);
		);
	</action>
	
	<action name="floorPlanDeactivateSpot">
		set(ptplugin[floorPlan].floorplanItems[0].selectedSpot, "");
		
		js(invokePluginFunction(floorPlan, unselectSpot));
	</action>
	
	<action name="floorPlanActivateDefaultSpot">
		set(floorPlanFloorPlanLoaded, true);
		
		set(floorPlanSpotFound, "");
		set(floorPlanSpotScene, "");
		set(floorPlanItemFound, "");
		set(floorPlanItemSearch, true);
		set(floorPlanSpotSearchActivated, true);
		set(floorPlanSpotSearchContinue, true);
		
		
		set(defaultfloorplaniteminc_wait,50);
		for(set(defaultfloorplaniteminc,0), defaultfloorplaniteminc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem.count , inc(defaultfloorplaniteminc),
			if(defaultfloorplaniteminc_wait == defaultfloorplaniteminc,
				add(defaultfloorplaniteminc_wait,50);
				wait(0);
			);
			if(floorPlanSpotSearchActivated == true,
				
				if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].groupName == scene[get(xml.scene)].group,
					set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					set(floorPlanItemSearch, false);
				,
					
					if(floorPlanItemFound == "",
						set(floorPlanItemFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
					);
				);
			);
			if(floorPlanSpotSearchActivated == true,
				set(defaultspotinc_wait,50);
				for(set(defaultspotinc,0), defaultspotinc LT ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot.count , inc(defaultspotinc),
					if(defaultspotinc_wait == defaultspotinc,
						add(defaultspotinc_wait,50);
						wait(0);
					);
					if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].isScene == true,
					
						if(floorPlanSpotSearchContinue == true,
							if(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene == xml.scene,
								set(floorPlanSpotFound, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].name));
								set(floorPlanSpotScene, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].spot[get(defaultspotinc)].scene));
								set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(ptplugin[floorPlan].floorplanItems[0].floorplanItem[get(defaultfloorplaniteminc)].name));
								if(floorPlanItemSearch == false,
									set(floorPlanSpotSearchContinue, false);
									set(floorPlanSpotSearchActivated, false);
								);
							);
						);
					);
					
				);
			);
		);
		
		if(floorPlanSpotFound == "",
			
			
			floorPlanDeactivateSpot();
			
			
			set(ptplugin[floorPlan].floorplanItems[0].selectedItem, get(floorPlanItemFound));
			
			
			ifnot(ptplugin[floorPlan].floorplanItems[0].selectedItem == "",
				floorPlanActivateSpot("", get(ptplugin[floorPlan].floorplanItems[0].selectedItem), "");
			);
		,
			
			floorPlanActivateSpot(get(floorPlanSpotFound), get(ptplugin[floorPlan].floorplanItems[0].selectedItem), get(floorPlanSpotScene));
		);
	</action>
	
	<action name="floorPlanChangeTitle">
		js(invokePluginFunction(floorPlan, changeTitle, %1));
	</action>
	
	<ptplugin name="floorPlanArea" engine="kolorArea">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="start_position" value="left" type="string" />
		<option name="margin_x" value="0" type="int" />
		<option name="margin_y" value="0" type="int" />
		<option name="display_title" value="false" type="bool" />
		<option name="title_font" value="Arial" type="string" />
		<option name="title_size" value="14" type="int" />
		<option name="title_weight" value="normal" type="string" />
		<option name="title_decoration" value="normal" type="string" />
		<option name="title_color" value="000000" type="string" />
		<option name="close_displayed" value="false" type="bool" />
		<option name="close_text" value="floorPlandisplay_close_text" type="string" />

		<option name="background_color" value="f2f2f2" type="string" />
		<option name="background_alpha" value="0" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="padding" value="0" type="int" />
		<option name="topleft_radius" value="0" type="int" />
		<option name="topright_radius" value="0" type="int" />
		<option name="bottomleft_radius" value="0" type="int" />
		<option name="bottomright_radius" value="0" type="int" />
		<option name="area_border_width" value="0" type="int" />
		<option name="area_border_color" value="f2f2f2" type="string" />
		<option name="area_border_alpha" value="1" type="float" />
		<option name="area_width" value="65" type="int" />
		<option name="area_height" value="80" type="int" />
		<option name="area_width_unit" value="percent" type="string" />
		<option name="area_height_unit" value="percent" type="string" />
		<option name="animation" value="true" type="bool" />
		<option name="animation_duration" value="300" type="int" />
		<option name="close_on_click" value="true" type="bool" />
		<option name="refresh_content" value="false" type="bool" />
		<option name="open_callback" value="addKolorFloorPlan('floorPlan', 'floorPlanArea_floorplanDIV');" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorAreaCallback_floorPlanArea')" type="string" />
		<option name="zorder" value="3" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	</ptplugin>
	
	<action name="kolorAreaJsReady_floorPlanArea">
		set(ptplugin[floorPlanArea].jsready, true);

	</action>
	
	<action name="openKolorArea_floorPlanArea">
		ifnot(ptplugin[floorPlanArea].isOpen,
			if(ptplugin[floorPlanArea].doNotDeleteMe,
				set(ptplugin[floorPlanArea].currentCall, false);
				set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			set(ptplugin[floorPlanArea].isOpen, true);
			
			js(showKolorArea(floorPlanArea, &lt;div id="floorPlanArea_floorplanDIV"&gt;&lt;/div&gt;));
			,
				set(ptplugin[floorPlanArea].currentCall, true);
				set(ptplugin[floorPlanArea].doNotDeleteMe, true);
				events.dispatch(onremovedisplayedobject);
				delayedcall(0.3,openKolorArea_floorPlanArea(););
			);
		);
	</action>
	
	<action name="closeKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			if(ptplugin[floorPlanArea].doNotDeleteMe,
				set(ptplugin[floorPlanArea].doNotDeleteMe, false);
			,
			js(invokePluginFunction(floorPlanArea, closeKolorArea));
			);
		);
	</action>
	
	<action name="toggleKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].isOpen,
			closeKolorArea_floorPlanArea();
		,
			openKolorArea_floorPlanArea();
		);
	</action>
	
	<action name="closeKolorAreaCallback_floorPlanArea">
		set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		set(ptplugin[floorPlanArea].isOpen, false);hideFloorplan();

	</action>
	
	<action name="changeTitleKolorArea_floorPlanArea">
		js(invokePluginFunction(floorPlanArea, changeTitle, %1));
	</action>
	
	<action name="showKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].doNotDeleteMe,
			set(ptplugin[floorPlanArea].currentCall, false);
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		set(ptplugin[floorPlanArea].isOpen, true);
		
		js(invokePluginFunction(floorPlanArea, showKolorArea, %1));
		,
			set(ptplugin[floorPlanArea].currentCall, true);
			set(ptplugin[floorPlanArea].doNotDeleteMe, true);
			events.dispatch(onremovedisplayedobject);
			delayedcall(0.3,showKolorArea_floorPlanArea(););
		);
	</action>
		
	<action name="hideKolorArea_floorPlanArea">
		if(ptplugin[floorPlanArea].doNotDeleteMe,
			set(ptplugin[floorPlanArea].doNotDeleteMe, false);
		,
		
		set(ptplugin[floorPlanArea].isOpen, false);
		js(invokePluginFunction(floorPlanArea, hideKolorArea, %1));
		);
	</action>
	
	<events name="kolorAreaEvents_floorPlanArea" 
		keep="true"
		hidetourcontrols="if(ptplugin[floorPlanArea].isOpen,set(restore_floorPlanArea, true);hideKolorArea_floorPlanArea(false);,set(restore_floorPlanArea, false););"
		showtourcontrols="if(tour_displayfloorplan,if(restore_floorPlanArea,showKolorArea_floorPlanArea(false);););"
		onremovedisplayedobject="ifnot(ptplugin[floorPlanArea].currentCall,if(ptplugin[floorPlanArea].isOpen,hideFloorplan();
););"
	/>
	

  <layer name="button"
         keep="true"
         url="%FIRSTXML%/graphics/button/buttonright.png" 
         align="bottom"
         x="125"
         y="0"
         zorder="4"
         visible="false"
         onclick="buttonOnClick"
         tooltip="buttontooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="50"
         width="50"
         />
  <action name="buttonOnClick">loadNextScene();


  </action>

  <events name="buttonevents" 
    onTourStart="showbutton();"
    hidetourcontrols="hidebutton();" 
    showtourcontrols="showbutton();" 
    keep="true" />
  <action name="hidebutton">set(layer[button].visible, false);</action>
  <action name="showbutton">if(tour_displaycontrols,set(layer[button].visible, true);,hidebutton(););</action>



  <layer name="button1"
         keep="true"
         url="%FIRSTXML%/graphics/button1/buttonhelp.png" 
         align="bottom"
         x="75"
         y="0"
         zorder="5"
         visible="false"
         onclick="button1OnClick"
         tooltip="button1tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="50"
         width="50"
         />
  <action name="button1OnClick">
displayImage(%FIRSTXML%/graphics/button1/instructions.png
             ,center,0,0
             ,300
             ,300

             ,false
             ,false
             ,false
             ,false
             ,000000
             ,0.80000000000000004);

  </action>

  <events name="button1events" 
    onTourStart="showbutton1();"
    hidetourcontrols="hidebutton1();" 
    showtourcontrols="showbutton1();" 
    keep="true" />
  <action name="hidebutton1">set(layer[button1].visible, false);</action>
  <action name="showbutton1">if(tour_displaycontrols,set(layer[button1].visible, true);,hidebutton1(););</action>



  <layer name="button2"
         keep="true"
         url="%FIRSTXML%/graphics/button2/buttoninfo.png" 
         align="bottom"
         x="25"
         y="0"
         zorder="6"
         visible="false"
         onclick="button2OnClick"
         tooltip="button2tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="50"
         width="50"
         />
  <action name="button2OnClick">
showTourInfo();




  </action>

  <events name="button2events" 
    onTourStart="showbutton2();"
    hidetourcontrols="hidebutton2();" 
    showtourcontrols="showbutton2();" 
    keep="true" />
  <action name="hidebutton2">set(layer[button2].visible, false);</action>
  <action name="showbutton2">if(tour_displaycontrols,set(layer[button2].visible, true);,hidebutton2(););</action>





  <layer name="togglebutton"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton/buttonplan.png" 
         align="bottom"
         x="-25"
         y="0"
         zorder="7"
         tooltip=""
         onhover="togglebuttonOnHover"
         state="true"
         onclick="togglebuttonOnClick"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         onout="hideTooltip();tween(scale, 1.0,0.5,easeOutQuad);"
         height="50"
         width="50"
         visible="false"
         />

  <action name="togglebuttonOnHover">
    if (state,
      set(tooltip, togglebuttonfirsttooltip);
     ,
      set(tooltip, togglebuttonsecondtooltip);
    );
    if (tooltip != "", showTooltip('plugin'););
  </action>
  <action name="togglebuttonOnClick">
    if (state,
      set(state, false);showFloorplan();


      set(url,%FIRSTXML%/graphics/togglebutton/buttonplan.png);
     ,
      set(state, true);showFloorplan();


      set(url,%FIRSTXML%/graphics/togglebutton/buttonplan.png);
    );
  </action>

  <events name="togglebuttonevents" 
    onTourStart="showtogglebutton();"
    hidetourcontrols="hidetogglebutton();" 
    showtourcontrols="showtogglebutton();" 
    keep="true" />
  <action name="hidetogglebutton">set(layer[togglebutton].visible, false);</action>
  <action name="showtogglebutton">if(tour_displaycontrols,set(layer[togglebutton].visible, true);,hidetogglebutton(););</action>





  <layer name="togglebutton1"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton1/buttongyro.png" 
         align="bottom"
         x="-75"
         y="0"
         zorder="8"
         tooltip=""
         onhover="togglebutton1OnHover"
         state="true"
         onclick="togglebutton1OnClick"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         onout="hideTooltip();tween(scale, 1.0,0.5,easeOutQuad);"
         height="50"
         width="50"
         visible="false"
         />

  <action name="togglebutton1OnHover">
    if (state,
      set(tooltip, togglebutton1firsttooltip);
     ,
      set(tooltip, togglebutton1secondtooltip);
    );
    if (tooltip != "", showTooltip('plugin'););
  </action>
  <action name="togglebutton1OnClick">
    if (state,
      set(state, false);enableGyroscope();


      set(url,%FIRSTXML%/graphics/togglebutton1/buttonswipe.png);
     ,
      set(state, true);disableGyroscope();


      set(url,%FIRSTXML%/graphics/togglebutton1/buttongyro.png);
    );
  </action>

  <events name="togglebutton1events" 
    onTourStart="showtogglebutton1();"
    hidetourcontrols="hidetogglebutton1();" 
    showtourcontrols="showtogglebutton1();" 
    keep="true" />
  <action name="hidetogglebutton1">set(layer[togglebutton1].visible, false);</action>
  <action name="showtogglebutton1">if(tour_displaycontrols,set(layer[togglebutton1].visible, true);,hidetogglebutton1(););</action>



  <layer name="button3"
         keep="true"
         url="%FIRSTXML%/graphics/button3/buttonleft.png" 
         align="bottom"
         x="-125"
         y="0"
         zorder="9"
         visible="false"
         onclick="button3OnClick"
         tooltip="button3tooltip"
         onhover="showTooltip('plugin');"
         onout="hideTooltip();tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="50"
         width="50"
         />
  <action name="button3OnClick">loadPreviousScene();


  </action>

  <events name="button3events" 
    onTourStart="showbutton3();"
    hidetourcontrols="hidebutton3();" 
    showtourcontrols="showbutton3();" 
    keep="true" />
  <action name="hidebutton3">set(layer[button3].visible, false);</action>
  <action name="showbutton3">if(tour_displaycontrols,set(layer[button3].visible, true);,hidebutton3(););</action>



  <layer name="button4"
         keep="true"
         url="%FIRSTXML%/graphics/button4/home.png" 
         align="bottomleft"
         x="0"
         y="0"
         zorder="10"
         visible="false"
         onclick="button4OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="50"
         width="50"
         />
  <action name="button4OnClick">hideTourControls();

          mainloadscene(pano20);lookat(get(panoview.h), get(panoview.v), get(panoview.fov));


  </action>

  <events name="button4events" 
    onTourStart="showbutton4();"
    hidetourcontrols="hidebutton4();" 
    showtourcontrols="showbutton4();" 
    keep="true" />
  <action name="hidebutton4">set(layer[button4].visible, false);</action>
  <action name="showbutton4">if(tour_displaycontrols,set(layer[button4].visible, true);,hidebutton4(););</action>





  <layer name="togglebutton2"
         keep="true"
         url="%FIRSTXML%/graphics/togglebutton2/openclose.png" 
         align="bottomright"
         x="0"
         y="0"
         zorder="11"
         state="true"
         onclick="togglebutton2OnClick"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         height="50"
         width="50"
         visible="false"
         />

  <action name="togglebutton2OnClick">
    if (state,
      set(state, false);hideTourControls();


      set(url,%FIRSTXML%/graphics/togglebutton2/openclose.png);
     ,
      set(state, true);showTourControls();


      set(url,%FIRSTXML%/graphics/togglebutton2/openclose.png);
    );
  </action>

  <events name="togglebutton2events" 
    onTourStart="showtogglebutton2();"
    keep="true" />
  <action name="hidetogglebutton2">set(layer[togglebutton2].visible, false);</action>
  <action name="showtogglebutton2">set(layer[togglebutton2].visible, true);</action>



  <events name="title_events" 
    onTourStart="showtitle();"
    hidetourcontrols="hidetitle();" 
    showtourcontrols="showtitle();" 
    onnewpano="updatetitle();"
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="hidetitle">set(layer[title].visible, false);</action>
  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    updatetitle();
  </action>

  <action name="updatetitle">
    getmessage(layer[title].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title].html);
  </action>
  <layer name="title" keep="true" zorder="12"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="bottom" x="0" y="55" width="100%" autoheight="true"
         background="false" capture="false" handcursor="false" selectable="false" enabled="false"
         borderwidth="0"
         alpha="1"
         visible="false"
         textshadow="1"
         css="text-align:center;
              color:#ffffff;
              font-family:Arial;
              font-weight:bold;
              font-size:16px;"/>




<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
          if(scene[get(xml.scene)].full360,
            set(sceneisfull360, false);
            sub(viewhfov, panoview.hmax, panoview.hmin);
            if (viewhfov == 360,
              sub(viewvfov, panoview.vmax, panoview.vmin);
              if (viewvfov == 180,
                set(sceneisfull360, true);
              );
            );
            if (sceneisfull360,
              set(plugin[gyroscope].camroll, true);
            ,
              set(plugin[gyroscope].camroll, false);
            );
          ,
            set(plugin[gyroscope].camroll, false);
          );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
        if(%1,
          set(plugin[gyroscope].activated,true);
        ,
          set(plugin[gyroscope].activated,false);
        );
        if (%1 != plugin[gyroscope].enabled,
          if(plugin[gyroscope].activated,
            switch(plugin[gyroscope].enabled);
          ,
            set(plugin[gyroscope].enabled, false);
          );
          if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
        );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      ifnot(tour_firstlittleplanet,
        
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

  <events name="eventsPluginevents" keep="true" onnewpano="eventsPluginonnewpano()"/>
  <action name="eventsPluginonnewpano">
  eventsPluginCheckIfActionShouldBeDone();
  if (dotheactioneventsPlugin,
    showTourControls();

  );
  </action>
  <action name="eventsPluginCheckIfActionShouldBeDone">
    set(dotheactioneventsPlugin, false);
    if (xml.scene == pano29, set(dotheactioneventsPlugin, true); );
    if (xml.scene == pano30, set(dotheactioneventsPlugin, true); );
    if (xml.scene == pano31, set(dotheactioneventsPlugin, true); );
    if (xml.scene == pano23, set(dotheactioneventsPlugin, true); );
    if (xml.scene == pano25, set(dotheactioneventsPlugin, true); );
    if (xml.scene == pano27, set(dotheactioneventsPlugin, true); );
  </action>

  <events name="eventsPlugin1events" keep="true" onTourStart="eventsPlugin1ontourstarts()"/>
  <action name="eventsPlugin1ontourstarts">
  eventsPlugin1CheckIfActionShouldBeDone();
  if (dotheactioneventsPlugin1,
    hideTourControls();

  );
  </action>
  <action name="eventsPlugin1CheckIfActionShouldBeDone">
    set(dotheactioneventsPlugin1, false);
    if (xml.scene == pano20, set(dotheactioneventsPlugin1, true); );
  </action>


  <layer align="topright"
         x="25"
         y="30"
         zorder="16"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logotooltipText"
			onhover="showTooltip('plugin');"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/logovie.png" 
         handcursor="false"

         height="60"
         width="160"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>




  <action name="hideTourInfo">set(tour_displayinfo, false);events.dispatch(onhidetourinfo);</action>
  <action name="showTourInfo">set(tour_displayinfo, true); events.dispatch(onshowtourinfo);</action>


  <action name="displayImage">
    if (layer[displayedStandardImage],
      if(layer[displayedStandardImage].doNotDeleteMe,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, false);
        
        if (%1 == layer[displayedStandardImage].url,
          applyDisplayedImageObjectAnimation(%8);
        ,
          setDisplayedImageObjectParameters(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10);
        );
      ,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, true);
        events.dispatch(onremovedisplayedobject);
        delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      );
    ,
      if(%10,
        addlayer(displayedStandardImageOverlay);
        set(layer[displayedStandardImageOverlay].keep, false);
        set(layer[displayedStandardImageOverlay].width, 100%);
        set(layer[displayedStandardImageOverlay].height, 100%);
        set(layer[displayedStandardImageOverlay].type, container);
        set(layer[displayedStandardImageOverlay].zorder, 98);
        set(layer[displayedStandardImageOverlay].visible, false);
        set(layer[displayedStandardImageOverlay].onclick, applyDisplayedImageObjectAnimation(%8););
        set(layer[displayedStandardImageOverlay].bgcolor, "0x%11");
        set(layer[displayedStandardImageOverlay].bgalpha, %12);
        set(layer[displayedStandardImageOverlay].bgcapture, true);
      );
      addlayer(displayedStandardImage);
      set(layer[displayedStandardImage].keep, false);
      set(layer[displayedStandardImage].onclick, applyDisplayedImageObjectAnimation(%8););
      set(layer[displayedStandardImage].zorder , 99);
      set(layer[displayedStandardImage].currentCall, true);
      set(layer[displayedStandardImage].doNotDeleteMe, true);
      set(layer[displayedStandardImage].onloaded, resizeDisplayedImageObject());
      events.dispatch(onremovedisplayedobject);
      delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      set(layer[displayedStandardImage].visible, false);
    );
  </action>
  <action name="applyDisplayedImageObjectAnimation">resumeautorotation(forcehotspot);

    if (%1,
      stoptween(layer[displayedStandardImage].width, layer[displayedStandardImage].height);
      tween(layer[displayedStandardImage].width|layer[displayedStandardImage].height, 1|1, 1, easeOutQuad, WAIT);
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    ,
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    );
  </action>
  <action name="setDisplayedImageObjectParameters">
    set(layer[displayedStandardImage].url       , %1);
    set(layer[displayedStandardImage].align     , %2);
    set(layer[displayedStandardImage].x         , %3);
    set(layer[displayedStandardImage].y         , %4);
    set(layer[displayedStandardImage].imgwidth  , %5);
    set(layer[displayedStandardImage].imgheight , %6);
    set(layer[displayedStandardImage].animated  , %8);
    set(layer[displayedStandardImage].applyratio, %9);
    set(layer[displayedStandardImage].overlay   , %10);
    if (%7,pauseautorotation(forcehotspot);
);
  </action>
  <action name="resizeDisplayedImageObject">
    if(layer[displayedStandardImage].url,
    set(layer[displayedStandardImage].fullwidth, get(layer[displayedStandardImage].width));
    set(layer[displayedStandardImage].fullheight, get(layer[displayedStandardImage].height));
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].width , 1);
      set(layer[displayedStandardImage].height, 1);
    );
    if(layer[displayedStandardImage].imgwidth != "" AND layer[displayedStandardImage].imgheight != "",
      if(layer[displayedStandardImage].imgwidth == "prop",
        set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
        indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
        if(tempDisplayedImageObjectHeightPercent GT 0,
          txtreplace(tempDisplayedImageObjectHeight, '%', '');
          mul(tempDisplayedImageObjectHeight, get(stageheight));
          div(tempDisplayedImageObjectHeight, 100);
          Math.round(tempDisplayedImageObjectHeight);
        );
        mul(flyingImgWidth,get(layer[displayedStandardImage].fullwidth),get(tempDisplayedImageObjectHeight));
        div(flyingImgWidth,get(layer[displayedStandardImage].fullheight));
        Math.round(flyingImgWidth);
        set(layer[displayedStandardImage].imgwidth , get(flyingImgWidth));
        set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
      ,
        if(layer[displayedStandardImage].imgheight == "prop",
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          mul(flyingImgHeight,get(layer[displayedStandardImage].fullheight),get(tempDisplayedImageObjectWidth));
          div(flyingImgHeight,get(layer[displayedStandardImage].fullwidth));
          Math.round(flyingImgHeight);
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight , get(flyingImgHeight));
        ,
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          if(tempDisplayedImageObjectHeightPercent GT 0,
            txtreplace(tempDisplayedImageObjectHeight, '%', '');
            mul(tempDisplayedImageObjectHeight, get(stageheight));
            div(tempDisplayedImageObjectHeight, 100);
            Math.round(tempDisplayedImageObjectHeight);
          );
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
        );
      );
    ,
      set(layer[displayedStandardImage].imgwidth , get(layer[displayedStandardImage].fullwidth));
      set(layer[displayedStandardImage].imgheight, get(layer[displayedStandardImage].fullheight));
    );
    
    set(resizedwidth, get(layer[displayedStandardImage].imgwidth));
    set(resizedheight, get(layer[displayedStandardImage].imgheight));
    if(layer[displayedStandardImage].applyratio,
      sub(resizedstagewidth, get(stagewidth), get(layer[displayedStandardImage].x));
      sub(resizedstageheight, get(stageheight), get(layer[displayedStandardImage].y));
      Math.abs(resizedstagewidth);
      Math.abs(resizedstageheight);
      if(resizedwidth GT resizedstagewidth,
        mul(tempresizedheight, get(resizedheight), get(resizedstagewidth));
        div(tempresizedheight, get(resizedwidth));
        Math.round(tempresizedheight);
        set(resizedwidth, get(resizedstagewidth));
        set(resizedheight, get(tempresizedheight));
      );
      if(resizedheight GT resizedstageheight,
        mul(tempresizedwidth, get(resizedwidth), get(resizedstageheight));
        div(tempresizedwidth, get(resizedheight));
        Math.round(tempresizedwidth);
        set(resizedheight, get(resizedstageheight));
        set(resizedwidth, get(tempresizedwidth));
      );
    );
    
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].animated, false);
      tween(layer[displayedStandardImage].width , get(resizedwidth), 1, easeOutQuad);
      tween(layer[displayedStandardImage].height, get(resizedheight), 1, easeOutQuad);
    ,
      set(layer[displayedStandardImage].width , get(resizedwidth));
      set(layer[displayedStandardImage].height, get(resizedheight));
    );
    if(layer[displayedStandardImage].overlay,set(layer[displayedStandardImageOverlay].visible, true););
    set(layer[displayedStandardImage].visible, true);
    ,
      delayedcall(0.2,resizeDisplayedImageObject(););
    );
  </action>
  <events name="displayedImageObjectEvents" keep="true" onremovedisplayedobject="displayedImageObjectOnRemoveDisplayedObject" onresize="if(layer[displayedStandardImage],resizeDisplayedImageObject());" />
  <action name="displayedImageObjectOnRemoveDisplayedObject">
    ifnot(layer[displayedStandardImage].currentCall,if(layer[displayedStandardImage].visible,resumeautorotation(forcehotspot);

      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););
      removelayer(displayedStandardImage);
    ););
  </action>


  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


  <action name="hideFloorplan">set(tour_displayfloorplan, false);events.dispatch(onhidetourfloorplan);</action>
  <action name="showFloorplan">set(tour_displayfloorplan, true); events.dispatch(onshowtourfloorplan);</action>


  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


</krpano>